#!/bin/bash

function build {
    docker build \
        -t beer-garden:local \
        -f $PROJECT_HOME/dev-utils/beer-garden/beer-garden.Dockerfile \
        --build-arg user_uid=`id -u` \
        $PROJECT_HOME/beer-garden/src/app/
}

function build_ui {
    docker build \
        -t beer-garden-ui:local \
        -f $PROJECT_HOME/dev-utils/beer-garden/beer-garden-ui.Dockerfile \
        --build-arg user_uid=`id -u` \
        $PROJECT_HOME/beer-garden/src/ui/
}

function build_react {
    docker build \
        -t beer-garden-react:local \
        -f $PROJECT_HOME/dev-utils/beer-garden/beer-garden-react.Dockerfile \
        --build-arg user_uid=`id -u` \
        $PROJECT_HOME/react-ui/
}

function build_plugin {
    docker build \
        -t beer-garden-remote-plugin:local \
        -f $PROJECT_HOME/dev-utils/beer-garden/beer-garden-remote-plugin.Dockerfile \
        --build-arg user_uid=`id -u` \
        $PROJECT_HOME/remote-plugins/
}

function start {
    cd $PROJECT_HOME/dev-utils/beer-garden

    if [ "$1" = "" ]; then
        container_list="proxy"
    elif [ "$1" = "all" ]; then
        container_list="proxy bg-parent1-ui-react bg-child1 bg-child2 bg-child2-grandchild1 bg-child2-ui"
    else
        container_list="bg-$1"
    fi

    docker-compose up -d $container_list
}

function stop {
    cd $PROJECT_HOME/dev-utils/beer-garden
    docker-compose down
}

function restart {
    if [ "$1" = "" ]; then
        garden="parent1"
    else
        garden=$1
    fi

    docker restart bg-${garden}
}

function log {
    if [ "$1" = "" ]; then
        garden="parent1"
    else
        garden=$1
    fi

    docker logs --tail 20 -f bg-${garden}
}

function log_ui {
    if [ "$1" = "" ]; then
        garden="parent1"
    else
        garden=$1
    fi

    docker logs --tail 20 -f bg-${garden}-ui
}

function log_react {
    docker logs --tail 20 -f bg-parent1-ui-react
}

function shell {
    docker exec -it bg-parent1 /bin/bash
}

function pyshell {
    if [ "$1" = "" ]; then
        garden="parent1"
    else
        garden=$1
    fi

    docker exec -it bg-${garden} /home/brewmeister/venv/bin/ipython --no-confirm-exit -i /opt/scratch.py
}

function docker_container_top {
    docker container top bg-parent1 -o pid,args
}

function run_tests {
    docker exec -it bg-parent1 bash -c "source \$HOME/venv/bin/activate && pytest -s $@"
}

function edit_conf {
    if [ "$1" = "" ]; then
        garden="parent1"
    else
        garden=$1
    fi

    vim $PROJECT_HOME/dev-utils/beer-garden/conf/bg-${garden}.yaml
}

function load {
  docker exec bg-parent1 /home/brewmeister/venv/bin/ipython /opt/loaddata.py
}

function login {
    if [ "$1" = "" ]; then
        echo "Usage: beer login <username>"
        exit
    else
        username=$1
    fi

    usercert=$PROJECT_HOME/dev-utils/beer-garden/certs/${username}.crt
    userkey=$PROJECT_HOME/dev-utils/beer-garden/certs/${username}.key
    cacert=$PROJECT_HOME/dev-utils/certs/ca-root.crt

    if [[ ! -f $usercert && ! -f $userkey ]]; then
        echo "Could not find certs for user ${username}"
        exit
    fi

    curl -s -X POST \
        --cert ${usercert} \
        --key ${userkey} \
        --cacert ~/dev/dev-utils/certs/ca-root.crt \
        https://localhost:8000/api/v1/token \
        | jq -r '.access' \
        > $PROJECT_HOME/.bglogin
}

function api {
    if [ ! -f $PROJECT_HOME/.bglogin ]; then
        echo "No auth token found. Use 'beer login' and then try again"
        exit
    fi

    url=http://localhost:8080/api/v1/$1

    curl -s -H 'Accept: application/json' -H "Authorization: Bearer `cat $PROJECT_HOME/.bglogin`" ${url} | jq .
}

function post_patch {
    if [ ! -f $PROJECT_HOME/.bglogin ]; then
        echo "No auth token found. Use 'beer login' and then try again"
        exit
    fi

    method=$1
    url=http://localhost:8080/api/v1/$2
    shift 2
    data=$@

    curl -X ${method} -H 'Accept: application/json' -H "Content-Type: application/json" -H "Authorization: Bearer `cat $PROJECT_HOME/.bglogin`" --data "${data}" ${url} | jq .
}

command=$1
shift

case $command in
    "build") build ;;
    "buildui") build_ui ;;
    "buildreact"|"buildr") build_react ;;
    "buildplugin"|"buildp") build_plugin ;;
    "up"|"start") start $1 ;;
    "down"|"stop") stop ;;
    "restart") restart ;;
    "log") log $1 ;;
    "logui") log_ui $1 ;;
    "logreact"|"logr") log_react ;;
    "conf") edit_conf $1 ;;
    "shell") shell ;;
    "pyshell") pyshell $1 ;;
    "ps") docker_container_top ;;
    "test") run_tests $@ ;;
    "load") load ;;
    "login") login $1;;
    "api") api $1;;
    "patch") post_patch PATCH $@;;
    "post") post_patch POST $@;;
esac
